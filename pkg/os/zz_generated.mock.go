// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/unstoppablemango/ux/pkg/os (interfaces: Os)
//
// Generated by this command:
//
//	mockgen -destination zz_generated.mock.go -package os . Os
//

// Package os is a generated GoMock package.
package os

import (
	io "io"
	reflect "reflect"

	afero "github.com/spf13/afero"
	gomock "go.uber.org/mock/gomock"
)

// MockOs is a mock of Os interface.
type MockOs struct {
	ctrl     *gomock.Controller
	recorder *MockOsMockRecorder
	isgomock struct{}
}

// MockOsMockRecorder is the mock recorder for MockOs.
type MockOsMockRecorder struct {
	mock *MockOs
}

// NewMockOs creates a new mock instance.
func NewMockOs(ctrl *gomock.Controller) *MockOs {
	mock := &MockOs{ctrl: ctrl}
	mock.recorder = &MockOsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOs) EXPECT() *MockOsMockRecorder {
	return m.recorder
}

// Fs mocks base method.
func (m *MockOs) Fs() afero.Fs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fs")
	ret0, _ := ret[0].(afero.Fs)
	return ret0
}

// Fs indicates an expected call of Fs.
func (mr *MockOsMockRecorder) Fs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fs", reflect.TypeOf((*MockOs)(nil).Fs))
}

// Getwd mocks base method.
func (m *MockOs) Getwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd.
func (mr *MockOsMockRecorder) Getwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockOs)(nil).Getwd))
}

// Stderr mocks base method.
func (m *MockOs) Stderr() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockOsMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockOs)(nil).Stderr))
}

// Stdin mocks base method.
func (m *MockOs) Stdin() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdin")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// Stdin indicates an expected call of Stdin.
func (mr *MockOsMockRecorder) Stdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdin", reflect.TypeOf((*MockOs)(nil).Stdin))
}

// Stdout mocks base method.
func (m *MockOs) Stdout() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *MockOsMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockOs)(nil).Stdout))
}
