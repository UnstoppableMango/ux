// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/unstoppablemango/ux/pkg/plugin (interfaces: Handler)
//
// Generated by this command:
//
//	mockgen -destination zz_generated.mock.go -package plugin . Handler
//

// Package plugin is a generated GoMock package.
package plugin

import (
	context "context"
	reflect "reflect"

	uxv1alpha1 "github.com/unstoppablemango/ux/gen/dev/unmango/ux/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
	isgomock struct{}
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockHandler) Generate(arg0 context.Context, arg1 *uxv1alpha1.Payload) (*uxv1alpha1.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0, arg1)
	ret0, _ := ret[0].(*uxv1alpha1.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockHandlerMockRecorder) Generate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockHandler)(nil).Generate), arg0, arg1)
}
